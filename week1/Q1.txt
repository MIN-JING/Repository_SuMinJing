1. Try the statements below in REPL. Please answer that there are correct or not and
explain the reasons.

a. val id = 9527
correct
宣告一個名為"id"的變數，並將它的值設成"9527"。

b. var number : Int = 5.6
incorrect
Int與Byte、Short、Long為4種整數型態。
5.6是浮點數，只能用Float、Double保存。
error: the floating-point literal does not conform to the expected type Int
錯誤訊息: 5.6這個浮點數(floating-point)不符合Int此一整數型態。

c. var title = "Hello Kotlin!"
correct
宣告一個名為"title"的變數，並將它的值設成"Hello Kotlin!"。

d. val content : String = null
incorrect
Kotlin型態預設不接受null值。
將變數設為null => 移除變數保存的物件參考。
error: null can not be a value of a non-null type String
錯誤訊息: null不能是非null type String(字串)的值。
如果想讓變數保存null值，必須將變數型態宣告成nullable。
在型態後方加上?來宣告nullable型態。
例如=> val content : String? = String()
String所保存的是一連串的多個字元(v.s Char儲存單一字元)。

e. val number : Double? = 556.6
correct
將型態後方加上?來宣告nullable型態，可以保存null值或它的基本型態。
例如Double?變數可接受Double(浮點數型態之一)物件和null。

f. var list: List<String>? = listOf(null, null)
incorrect
使用listOf傳入List初始值沒問題。
當使用List<String>?來明確定義List型態時，List後方加上?來宣告成nullable的List。
但Kotlin型態預設不接受null值(即程式碼中的String)，遇到給定的(null, null)即發生錯誤。
error: type mismatch: inferred type is String? but String was expected
錯誤訊息: 錯誤型態: 推斷是nullable String(String?)但預期得到非nullabe String(即String)

g. var list: List<String?>? = listOf("Wayne", "Chen")
correct
當我們將List參考的String設為nullabe(String?)，List也宣告為nullable(List?)。
表示這個List裡可以有null值及任何型態的物件參考。並且在List裡放入的String值也是nullable。
將String型態的"Wayne"、 "Chen"放入List就不會發生問題了。null值亦同。
例如: var list: List<String?>? = listOf("Wayne", null)

h. list.size
incorrect
size: Returns the size of the collection.(size傳回集合的規模)
承前面var list: List<String?>? = listOf("Wayne", "Chen")，list被宣告為nullable型態的變數。
Kotlin為了避免發生NullPointerException例外警告，將nullable型態變數接收者限定只能用安全呼叫運算子(?.)或非null斷言運算子(!!.)呼叫。
error: only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type List<String?>?
句點運算子 => 呼叫某定義函式、屬性。

i. list?.size
correct
?. => 安全呼叫運算子，可以安全使用nullabe型態的list。
承前面var list: List<String?>? = listOf("Wayne", "Chen")，list被宣告為nullable型態的變數。且有2個值。
故結果傳回2。
list?.size
res24: kotlin.Int? = 2