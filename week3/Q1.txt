1. What is Encapsulation? Try to list out the benefits of Encapsulation.

封裝(Encapsulation)是一種限制直接取得物件(object)的方法。
封裝讓公開集合(expose a set of public methods)可以修改私有內部區域(private internal fields)，
以及使其他類別(class)得以操控這些內部區域。

封裝，會用到幕後屬性(backing property)，以及用getter回傳特定值。

好處:
1.減少漏洞。被封裝的物件不會被任意調用。也不會因為隨機的外部類別錯誤造成漏洞追蹤的困難。
2.降低系統複雜度。
3.增加穩健性(robustness)。




例如: 不要在view model之外公開MutableLiveData。

private val _score = MutableLiveData<Int>()
val score: LiveData<Int>
    get() = _score

令_score為私有的MutableLiveData(可變化、修改的LiveData)，
後來宣告score為公開的LiveData(只供讀取)，以便在view model外的gameFragment處理。


Lesson 5,ep 16
https://developer.android.com/codelabs/kotlin-android-training-live-data#5

https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)

https://developer.android.com/courses/quizzes/kotlin-fundamentals-six/kotlin-fundamentals-six

How do you encapsulate the LiveData stored in a ViewModel so that external objects can read data without being able to update it?

(A)Inside the ViewModel, change the data type of the property to be LiveData and make it private. Use a backing property to expose a read-only property of type MutableLiveData.

(B)Inside the ViewModel, change the data type of the property to be MutableLiveData and make it private. Use a backing property to expose a read-only property of type LiveData.

(C)Inside the UI controller, change the data type of the property to MutableLiveData. Use a backing property to expose a read-only property of type LiveData.

(D)Inside the ViewModel, change the data type of the property to LiveData.